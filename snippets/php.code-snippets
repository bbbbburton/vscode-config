{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"If_Statement-html": {
		"prefix": "if",
		"scope": "html",
		"body": [
			"<?php if (${1:condition}): ?>",
			"",
			"<?php endif ?>"
		],
		"description": "PHP alternative syntax for control structures: if"
	},
	"foreach-html": {
		"prefix": "foreach",
		"scope": "html",
		"body": [
			"<?php foreach (${1:array} as ${2:key} => ${3:value}): ?>",
			"",
			"<?php endforeach ?>"
		],
		"description": "PHP alternative syntax for control structures: foreach"
	},
	"foreach-php": {
		"prefix": "foreach",
		"scope": "php",
		"body": [
			"foreach (${1:array} as ${2:key} => ${3:value}) {",
			"",
			"}"
		],
		"description": "PHP control structures: foreach"
	},
	"debug": {
		"prefix": "d",
		"scope": "php",
		"body": [
			"debug(${1:var});"
		],
		"description": "Debug"
	},
	"debug-die": {
		"prefix": "dd",
		"scope": "php",
		"body": [
			"debug(${1:var});exit;",
		],
		"description": "Debug and die"
	},
	"sqld-long": {
		"prefix": "sq",
		"scope": "php",
		"body": [
			"\\DebugKit\\DebugSql::sqld(${1:var}, true, null, 2);"
		],
		"description": "sqld long mode"
	},
	"debug-die-collection": {
		"prefix": "ddc",
		"scope": "php",
		"body": [
			"debug(${1:var}->toArray());exit;"
		],
		"description": "Debug and die collection"
	},
	// "pre-print_r": {
	//     "prefix": "pr",
	//     "scope": "php",
	//     "body": [
	//         "echo '<pre>',print_r(${1:var}),'</pre>';",
	//     ],
	//     "description": "Pre and print_r"
	// },
	// "pre-print_r-exit": {
	//     "prefix": "pre",
	//     "scope": "php",
	//     "body": [
	//         "echo '<pre>';print_r(${1:var});echo '</pre>';exit;",
	//     ],
	//     "description": "Pre and print_r and exit"
	// },
	"cake.form": {
		"prefix": "form",
		"scope": "html",
		"body": [
			"<?= \\$this->Form->create(${1:context}, ['novalidate' => true, 'class' => 'needs-validation']) ?>",
			"",
			"<?= \\$this->Form->end() ?>"
		],
		"description": "Generate cake form"
	},
	"php-class-debug": {
		"prefix": "cm",
		"scope": "php",
		"body": [
			"get_class_methods(get_class(${1:object}))"
		],
		"description": "Get class methods from objects"
	},
	"php-block": {
		"prefix": "pp",
		"scope": "html",
		"body": [
			"<?php",
			"\t${1:content}",
			"?>"
		],
		"description": "Create PHP block"
	},
	"shorthand-php-block": {
		"prefix": "p",
		"scope": "html",
		"body": [
			"<?= ${1:content} ?>"
		],
		"description": "Create shorthand PHP block"
	},
	"php-this": {
		"prefix": "t",
		"scope": "php",
		"body": [
			"\\$this->${1}"
		],
		"description": "Create shorthand PHP block"
	},
	"cake-form-control": {
		"prefix": "fc",
		"scope": "php",
		"body": [
			"\\$this->Form->control('${1}')"
		],
		"description": "Create CakePHP form control"
	}
}
